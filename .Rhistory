#' @param params List. Parameter yang diperlukan untuk distribusi tersebut.
#'
#' @return Vektor numerik berisi data simulasi dari distribusi yang dipilih.
#'
#' @examples
#' simulate_data(100, "normal", list(mean = 0, sd = 1))
#' simulate_data(100, "poisson", list(lambda = 3))
#' simulate_data(100, "uniform", list(min = 0, max = 10))
#'
#' @export
simulate_data <- function(n = 100, dist = "normal", params = list()) {
switch(dist,
"normal" = rnorm(n, mean = params$mean, sd = params$sd),
"exponential" = rexp(n, rate = params$rate),
"gamma" = rgamma(n, shape = params$shape, rate = params$rate),
"uniform" = runif(n, min = params$min, max = params$max),
"lognormal" = rlnorm(n, meanlog = params$meanlog, sdlog = params$sdlog),
"binomial" = rbinom(n, size = params$size, prob = params$prob),
"poisson" = rpois(n, lambda = params$lambda),
"geometric" = rgeom(n, prob = params$prob),
stop("Distribusi tidak dikenali. Gunakan salah satu dari: normal, exponential, gamma, uniform, lognormal, binomial, poisson, geometric.")
)
}
#' @return Objek hasil uji dari `ks.test()` atau `chisq.test()`, tergantung distribusinya.
#'
#' @examples
#' x <- simulate_data(200, "normal", list(mean = 0, sd = 1))
#' uji_gof(x, dist = "normal", params = list(mean = 0, sd = 1))
#'
#' y <- simulate_data(200, "poisson", list(lambda = 3))
#' uji_gof(y, dist = "poisson", params = list(lambda = 3))
#'
#' @export
uji_gof <- function(data, dist, params = list()) {
if (dist %in% c("normal", "exponential", "gamma", "uniform", "lognormal")) {
# Distribusi kontinu → uji KS
pfun <- switch(dist,
"normal" = function(x) pnorm(x, mean = params$mean, sd = params$sd),
"exponential" = function(x) pexp(x, rate = params$rate),
"gamma" = function(x) pgamma(x, shape = params$shape, rate = params$rate),
"uniform" = function(x) punif(x, min = params$min, max = params$max),
"lognormal" = function(x) plnorm(x, meanlog = params$meanlog, sdlog = params$sdlog)
)
return(ks.test(data, pfun))
} else if (dist %in% c("binomial", "poisson", "geometric")) {
# Distribusi diskrit → uji Chi-square
tab <- table(factor(data, levels = 0:max(data)))
expected_probs <- switch(dist,
"binomial" = dbinom(0:max(data), size = params$size, prob = params$prob),
"poisson" = dpois(0:max(data), lambda = params$lambda),
"geometric" = dgeom(0:max(data), prob = params$prob)
)
expected <- expected_probs * length(data)
return(chisq.test(tab, p = expected / sum(expected), rescale.p = TRUE))
} else {
stop("Distribusi tidak dikenali untuk uji GoF.")
}
}
#' @param dist String. Nama distribusi yang digunakan.
#' @param params List. Parameter dari distribusi yang bersangkutan.
#'
#' @return Tidak mengembalikan objek. Fungsi menghasilkan grafik (histogram + PDF teoritis).
#'
#' @examples
#' data <- simulate_data(200, "normal", list(mean = 0, sd = 1))
#' visual_gof(data, "normal", list(mean = 0, sd = 1))
#'
#' @export
visual_gof <- function(data, dist, params) {
hist(data,
probability = TRUE,
col = "lightblue",
breaks = 30,
main = paste("Histogram dan PDF -", dist),
xlab = "Data")
curve({
switch(dist,
"normal" = dnorm(x, mean = params$mean, sd = params$sd),
"exponential" = dexp(x, rate = params$rate),
"gamma" = dgamma(x, shape = params$shape, rate = params$rate),
"uniform" = dunif(x, min = params$min, max = params$max),
"lognormal" = dlnorm(x, meanlog = params$meanlog, sdlog = params$sdlog),
NA  # fallback jika distribusi tidak dikenali
)
}, col = "red", lwd = 2, add = TRUE)
}
library(Team10Pack)
library(Team10Pack)
library(Team10Pack)
simulate_data(100)
simulate_data(100, 10, 1)
simulate_data
dat = simulate_data(100, 10, 1)
dat
dat = simulate_data(100, normal)
dat = simulate_data(100, "normal")
dat = simulate_data(100, "normal", 10)
simulate_data(100, "normal", list(mean = 0, sd = 1))
dat = simulate_data(100, "normal", list(mean = 0, sd = 1))
dat
library(devtools)
devtools::document()
devtools::document()
#' @param params List. Parameter yang diperlukan untuk distribusi tersebut.
#'
#' @return Vektor numerik berisi data simulasi dari distribusi yang dipilih.
#'
#' @examples
#' simulate_data(100, "normal", list(mean = 0, sd = 1))
#' simulate_data(100, "poisson", list(lambda = 3))
#' simulate_data(100, "uniform", list(min = 0, max = 10))
#'
#' @export
simulate_data <- function(n = 100, dist = "normal", params = list()) {
switch(dist,
"normal" = rnorm(n, mean = params$mean, sd = params$sd),
"exponential" = rexp(n, rate = params$rate),
"gamma" = rgamma(n, shape = params$shape, rate = params$rate),
"uniform" = runif(n, min = params$min, max = params$max),
"lognormal" = rlnorm(n, meanlog = params$meanlog, sdlog = params$sdlog),
"binomial" = rbinom(n, size = params$size, prob = params$prob),
"poisson" = rpois(n, lambda = params$lambda),
"geometric" = rgeom(n, prob = params$prob),
stop("Distribusi tidak dikenali. Gunakan salah satu dari: normal, exponential, gamma, uniform, lognormal, binomial, poisson, geometric.")
)
}
#' @return Objek hasil uji dari `ks.test()` atau `chisq.test()`, tergantung distribusinya.
#'
#' @examples
#' x <- simulate_data(200, "normal", list(mean = 0, sd = 1))
#' uji_gof(x, dist = "normal", params = list(mean = 0, sd = 1))
#'
#' y <- simulate_data(200, "poisson", list(lambda = 3))
#' uji_gof(y, dist = "poisson", params = list(lambda = 3))
#'
#' @export
uji_gof <- function(data, dist, params = list()) {
if (dist %in% c("normal", "exponential", "gamma", "uniform", "lognormal")) {
# Distribusi kontinu → uji KS
pfun <- switch(dist,
"normal" = function(x) pnorm(x, mean = params$mean, sd = params$sd),
"exponential" = function(x) pexp(x, rate = params$rate),
"gamma" = function(x) pgamma(x, shape = params$shape, rate = params$rate),
"uniform" = function(x) punif(x, min = params$min, max = params$max),
"lognormal" = function(x) plnorm(x, meanlog = params$meanlog, sdlog = params$sdlog)
)
return(ks.test(data, pfun))
} else if (dist %in% c("binomial", "poisson", "geometric")) {
# Distribusi diskrit → uji Chi-square
tab <- table(factor(data, levels = 0:max(data)))
expected_probs <- switch(dist,
"binomial" = dbinom(0:max(data), size = params$size, prob = params$prob),
"poisson" = dpois(0:max(data), lambda = params$lambda),
"geometric" = dgeom(0:max(data), prob = params$prob)
)
expected <- expected_probs * length(data)
return(chisq.test(tab, p = expected / sum(expected), rescale.p = TRUE))
} else {
stop("Distribusi tidak dikenali untuk uji GoF.")
}
}
#' @param dist String. Nama distribusi yang digunakan.
#' @param params List. Parameter dari distribusi yang bersangkutan.
#'
#' @return Tidak mengembalikan objek. Fungsi menghasilkan grafik (histogram + PDF teoritis).
#'
#' @examples
#' data <- simulate_data(200, "normal", list(mean = 0, sd = 1))
#' visual_gof(data, "normal", list(mean = 0, sd = 1))
#'
#' @export
visual_gof <- function(data, dist, params) {
hist(data,
probability = TRUE,
col = "lightblue",
breaks = 30,
main = paste("Histogram dan PDF -", dist),
xlab = "Data")
curve({
switch(dist,
"normal" = dnorm(x, mean = params$mean, sd = params$sd),
"exponential" = dexp(x, rate = params$rate),
"gamma" = dgamma(x, shape = params$shape, rate = params$rate),
"uniform" = dunif(x, min = params$min, max = params$max),
"lognormal" = dlnorm(x, meanlog = params$meanlog, sdlog = params$sdlog),
NA  # fallback jika distribusi tidak dikenali
)
}, col = "red", lwd = 2, add = TRUE)
}
devtools::document()
devtools::document()
devtools::document()
rm(list = c("simulate_data", "uji_gof", "visual_gof"))
devtools::document()
visual_gof(data, "normal", list(mean = 0, sd = 1))
x <- simulate_data(200, "normal", list(mean = 0, sd = 1))
uji_gof(x, dist = "normal", params = list(mean = 0, sd = 1))
data <- simulate_data(200, "normal", list(mean = 0, sd = 1))
visual_gof(data, "normal", list(mean = 0, sd = 1))
library(Team10Pack)
devtools::document()
devtools::install()
library(Team10Pack)
simulate_data(100, "normal", list(mean = 0, sd = 1))
library(Team10Pack)
simulate_data(n = 100, dist = "normal", params = list())
simulate_data(100, "poisson", list(lambda = 3))
detach("package:Team10Pack", unload = TRUE)
